"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var ts = require("typescript");
var Lint = require("tslint");
var tsutils_1 = require("tsutils");
var RULE_NAME = 'ter-padded-blocks';
var OPTION_ALWAYS = 'always';
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.formatOptions = function (ruleArguments) {
        var config = ruleArguments[0] || OPTION_ALWAYS;
        if (typeof (config) === 'string') {
            var always = config === OPTION_ALWAYS;
            return {
                blocks: always,
                classes: always,
                switches: always
            };
        }
        else {
            return {
                blocks: config['blocks'] && config['blocks'] === OPTION_ALWAYS,
                classes: config['classes'] && config['classes'] === OPTION_ALWAYS,
                switches: config['switches'] && config['switches'] === OPTION_ALWAYS
            };
        }
    };
    Rule.prototype.apply = function (sourceFile) {
        var opt = this.formatOptions(this.ruleArguments);
        var walker = new RuleWalker(sourceFile, this.ruleName, opt);
        return this.applyWithWalker(walker);
    };
    Rule.metadata = {
        ruleName: RULE_NAME,
        hasFix: false,
        description: 'enforces consistent empty line padding within blocks',
        rationale: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["\n      Some style guides require block statements to start and end with blank\n      lines. The goal is to improve readability by visually separating the\n      block content and the surrounding code.\n      "], ["\n      Some style guides require block statements to start and end with blank\n      lines. The goal is to improve readability by visually separating the\n      block content and the surrounding code.\n      "]))),
        optionsDescription: 'This rule has one option, which can be a string option or an object option',
        options: {
            type: 'array',
            items: [
                {
                    enum: ['always', 'never']
                },
                {
                    type: 'object',
                    properties: {
                        blocks: {
                            enum: ['always', 'never']
                        },
                        classes: {
                            enum: ['always', 'never']
                        },
                        switches: {
                            enum: ['always', 'never']
                        }
                    },
                    additionalProperties: false
                }
            ],
            maxLength: 1
        },
        optionExamples: [
            Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["\n        \"", "\": [true]\n        "], ["\n        \"", "\": [true]\n        "])), RULE_NAME),
            Lint.Utils.dedent(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject(["\n        \"", "\": [true, \"always\"]\n        "], ["\n        \"", "\": [true, \"always\"]\n        "])), RULE_NAME),
            Lint.Utils.dedent(templateObject_4 || (templateObject_4 = tslib_1.__makeTemplateObject(["\n        \"", "\": [true, \"never\"]\n        "], ["\n        \"", "\": [true, \"never\"]\n        "])), RULE_NAME),
            Lint.Utils.dedent(templateObject_5 || (templateObject_5 = tslib_1.__makeTemplateObject(["\n        \"", "\": [true, { \"blocks\": \"always\" }]\n        "], ["\n        \"", "\": [true, { \"blocks\": \"always\" }]\n        "])), RULE_NAME),
            Lint.Utils.dedent(templateObject_6 || (templateObject_6 = tslib_1.__makeTemplateObject(["\n        \"", "\": [true, { \"blocks\": \"never\" }]\n        "], ["\n        \"", "\": [true, { \"blocks\": \"never\" }]\n        "])), RULE_NAME)
        ],
        typescriptOnly: false,
        type: 'style'
    };
    Rule.FAILURE_STRING = {
        always: 'Block must be padded by blank lines.',
        never: 'Block must not be padded by blank lines.'
    };
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var RuleWalker = (function (_super) {
    tslib_1.__extends(RuleWalker, _super);
    function RuleWalker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RuleWalker.prototype.walk = function (sourceFile) {
        var _this = this;
        sourceFile.forEachChild(function (node) { return _this.processNode(node); });
    };
    RuleWalker.prototype.processNode = function (node) {
        var _this = this;
        switch (node.kind) {
            case ts.SyntaxKind.Block:
            case ts.SyntaxKind.ClassDeclaration:
            case ts.SyntaxKind.CaseBlock:
                this.checkPadding(node);
        }
        node.forEachChild(function (child) { return _this.processNode(child); });
    };
    RuleWalker.prototype.getParts = function (node) {
        var openBrace, body, closeBrace;
        node.getChildren().forEach(function (child) {
            if (child.kind === ts.SyntaxKind.OpenBraceToken) {
                openBrace = child;
            }
            else if (child.kind === ts.SyntaxKind.SyntaxList) {
                body = child;
            }
            else if (child.kind === ts.SyntaxKind.CloseBraceToken) {
                closeBrace = child;
            }
        });
        return {
            openBrace: openBrace,
            body: body,
            closeBrace: closeBrace
        };
    };
    RuleWalker.prototype.checkPadding = function (node) {
        var paddingAllowed = this.options.blocks;
        if (node.kind === ts.SyntaxKind.ClassDeclaration) {
            paddingAllowed = this.options.classes;
        }
        else if (node.parent && node.parent.kind === ts.SyntaxKind.SwitchStatement) {
            paddingAllowed = this.options.switches;
        }
        if (paddingAllowed == undefined) {
            return;
        }
        var _a = this.getParts(node), openBrace = _a.openBrace, body = _a.body, closeBrace = _a.closeBrace;
        var firstChild = body.getChildAt(0);
        var firstChildPosition = firstChild && firstChild.getStart();
        var firstChildLine = firstChild && this.sourceFile.getLineAndCharacterOfPosition(firstChildPosition).line;
        var lastChild = body.getChildAt(body.getChildCount() - 1);
        var lastChildPosition = lastChild && lastChild.getEnd();
        var lastChildLine = lastChild && this.sourceFile.getLineAndCharacterOfPosition(lastChildPosition).line;
        var openPosition = openBrace.getStart();
        var openLine = this.sourceFile.getLineAndCharacterOfPosition(openPosition).line;
        var closePosition = closeBrace.getEnd();
        var closeLine = this.sourceFile.getLineAndCharacterOfPosition(closePosition).line;
        var comments = [];
        tsutils_1.forEachComment(node, function (_fullText, comment) {
            comments.push(comment);
        });
        var splice;
        for (var i = 0; i < comments.length; i++) {
            var comment = comments[i];
            var line = this.sourceFile.getLineAndCharacterOfPosition(comment.pos).line;
            if (line === openLine || (line === openLine + 1 && line !== firstChildLine)) {
                openPosition = comment.pos;
                openLine = line;
                splice = i;
            }
            else {
                break;
            }
        }
        if (splice !== undefined) {
            comments = comments.splice(splice + 1);
        }
        splice = undefined;
        for (var i = comments.length - 1; i >= 0; i--) {
            var comment = comments[i];
            var line = this.sourceFile.getLineAndCharacterOfPosition(comment.pos).line;
            if (line === closeLine || (line === closeLine - 1 && line !== lastChildLine)) {
                closePosition = comment.end;
                closeLine = line;
                splice = i;
            }
            else {
                break;
            }
        }
        if (splice !== undefined) {
            comments = comments.slice(0, splice);
        }
        if (comments.length > 0) {
            var firstCommentLine = this.sourceFile.getLineAndCharacterOfPosition(comments[0].pos).line;
            var lastCommentLine = this.sourceFile.getLineAndCharacterOfPosition(comments[comments.length - 1].end).line;
            if (firstChildLine == undefined || firstCommentLine < firstChildLine) {
                firstChildLine = firstCommentLine;
                firstChildPosition = comments[0].pos;
            }
            if (lastChildLine == undefined || lastCommentLine > lastChildLine) {
                lastChildLine = lastCommentLine;
                lastChildPosition = comments[comments.length - 1].end;
            }
        }
        if (openLine === closeLine && firstChildLine == undefined && lastChildLine == undefined) {
            return;
        }
        var openPadded = openLine !== firstChildLine && (firstChildLine == undefined ? (closeLine - openLine > 1) : (firstChildLine - 1) !== openLine);
        var closePadded = closeLine !== lastChildLine && (lastChildLine == undefined ? (closeLine - openLine > 1) : (lastChildLine + 1) !== closeLine);
        if (openPadded === closePadded) {
            if (paddingAllowed && !openPadded) {
                this.addFailure(openPosition, closePosition, Rule.FAILURE_STRING.always);
            }
            else if (!paddingAllowed && openPadded) {
                this.addFailure(openPosition, closePosition, Rule.FAILURE_STRING.never);
            }
        }
        else {
            if (paddingAllowed ? !openPadded : openPadded) {
                this.addFailure(openPosition, firstChildPosition != undefined ?
                    firstChildPosition :
                    closePosition, paddingAllowed ?
                    Rule.FAILURE_STRING.always :
                    Rule.FAILURE_STRING.never);
            }
            else if (paddingAllowed ? !closePadded : closePadded) {
                this.addFailure(lastChildPosition != undefined ?
                    lastChildPosition :
                    closePosition, closePosition - 1, paddingAllowed ?
                    Rule.FAILURE_STRING.always :
                    Rule.FAILURE_STRING.never);
            }
        }
    };
    return RuleWalker;
}(Lint.AbstractWalker));
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
