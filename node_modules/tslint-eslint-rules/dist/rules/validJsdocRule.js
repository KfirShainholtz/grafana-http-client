"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var ts = require("typescript");
var Lint = require("tslint");
var doctrine = require("doctrine");
var RULE_NAME = 'valid-jsdoc';
var OPTIONS;
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        var opts = this.getOptions().ruleArguments;
        OPTIONS = {
            prefer: {},
            requireReturn: true,
            requireParamType: true,
            requireReturnType: true,
            requireParamDescription: true,
            requireReturnDescription: true,
            matchDescription: ''
        };
        if (opts && opts.length > 0) {
            if (opts[0].prefer) {
                OPTIONS.prefer = opts[0].prefer;
            }
            OPTIONS.requireReturn = opts[0].requireReturn !== false;
            OPTIONS.requireParamType = opts[0].requireParamType !== false;
            OPTIONS.requireReturnType = opts[0].requireReturnType !== false;
            OPTIONS.requireParamDescription = opts[0].requireParamDescription !== false;
            OPTIONS.requireReturnDescription = opts[0].requireReturnDescription !== false;
            OPTIONS.matchDescription = opts[0].matchDescription;
        }
        var walker = new ValidJsdocWalker(sourceFile, this.getOptions());
        return this.applyWithWalker(walker);
    };
    Rule.FAILURE_STRING = {
        missingBrace: 'JSDoc type missing brace',
        syntaxError: 'JSDoc syntax error',
        missingParameterType: function (name) { return "missing JSDoc parameter type for '" + name + "'"; },
        missingParameterDescription: function (name) { return "missing JSDoc parameter description for '" + name + "'"; },
        duplicateParameter: function (name) { return "duplicate JSDoc parameter '" + name + "'"; },
        unexpectedTag: function (title) { return "unexpected @" + title + " tag; function has no return statement"; },
        missingReturnType: 'missing JSDoc return type',
        missingReturnDescription: 'missing JSDoc return description',
        prefer: function (name) { return "use @" + name + " instead"; },
        missingReturn: function (param) { return "missing JSDoc @" + (param || 'returns') + " for function"; },
        wrongParam: function (expected, actual) { return "expected JSDoc for '" + expected + "' but found '" + actual + "'"; },
        missingParam: function (name) { return "missing JSDoc for parameter '" + name + "'"; },
        wrongDescription: 'JSDoc description does not satisfy the regex pattern',
        invalidRegexDescription: function (error) { return "configured matchDescription is an invalid RegExp. Error: " + error; }
    };
    Rule.metadata = {
        ruleName: RULE_NAME,
        hasFix: false,
        description: 'enforce valid JSDoc comments',
        rationale: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["\n      [JSDoc](http://usejsdoc.org/) generates application programming interface (API) documentation\n      from specially-formatted comments in JavaScript code. So does [typedoc](http://typedoc.org/).\n\n      If comments are invalid because of typing mistakes, then documentation will be incomplete.\n\n      If comments are inconsistent because they are not updated when function definitions are\n      modified, then readers might become confused.\n      "], ["\n      [JSDoc](http://usejsdoc.org/) generates application programming interface (API) documentation\n      from specially-formatted comments in JavaScript code. So does [typedoc](http://typedoc.org/).\n\n      If comments are invalid because of typing mistakes, then documentation will be incomplete.\n\n      If comments are inconsistent because they are not updated when function definitions are\n      modified, then readers might become confused.\n      "]))),
        optionsDescription: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["\n      This rule has an object option:\n\n      * `\"prefer\"` enforces consistent documentation tags specified by an object whose properties\n                     mean instead of key use value (for example, `\"return\": \"returns\"` means\n                     instead of `@return` use `@returns`)\n      * `\"preferType\"` enforces consistent type strings specified by an object whose properties\n                         mean instead of key use value (for example, `\"object\": \"Object\"` means\n                         instead of `object` use `Object`)\n      * `\"requireReturn\"` requires a return tag:\n        * `true` (default) *even if* the function or method does not have a return statement\n                   (this option value does not apply to constructors)\n        * `false` *if and only if* the function or method has a return statement (this option\n                    value does apply to constructors)\n      * `\"requireParamType\"`: `false` allows missing type in param tags\n      * `\"requireReturnType\"`: `false` allows missing type in return tags\n      * `\"matchDescription\"` specifies (as a string) a regular expression to match the description\n                               in each JSDoc comment (for example, `\".+\"` requires a description;\n                               this option does not apply to descriptions in parameter or return\n                               tags)\n      * `\"requireParamDescription\"`: `false` allows missing description in parameter tags\n      * `\"requireReturnDescription\"`: `false` allows missing description in return tags\n      "], ["\n      This rule has an object option:\n\n      * \\`\"prefer\"\\` enforces consistent documentation tags specified by an object whose properties\n                     mean instead of key use value (for example, \\`\"return\": \"returns\"\\` means\n                     instead of \\`@return\\` use \\`@returns\\`)\n      * \\`\"preferType\"\\` enforces consistent type strings specified by an object whose properties\n                         mean instead of key use value (for example, \\`\"object\": \"Object\"\\` means\n                         instead of \\`object\\` use \\`Object\\`)\n      * \\`\"requireReturn\"\\` requires a return tag:\n        * \\`true\\` (default) *even if* the function or method does not have a return statement\n                   (this option value does not apply to constructors)\n        * \\`false\\` *if and only if* the function or method has a return statement (this option\n                    value does apply to constructors)\n      * \\`\"requireParamType\"\\`: \\`false\\` allows missing type in param tags\n      * \\`\"requireReturnType\"\\`: \\`false\\` allows missing type in return tags\n      * \\`\"matchDescription\"\\` specifies (as a string) a regular expression to match the description\n                               in each JSDoc comment (for example, \\`\".+\"\\` requires a description;\n                               this option does not apply to descriptions in parameter or return\n                               tags)\n      * \\`\"requireParamDescription\"\\`: \\`false\\` allows missing description in parameter tags\n      * \\`\"requireReturnDescription\"\\`: \\`false\\` allows missing description in return tags\n      "]))),
        options: {
            type: 'object',
            properties: {
                prefer: {
                    type: 'object',
                    additionalProperties: {
                        type: 'string'
                    }
                },
                preferType: {
                    type: 'object',
                    additionalProperties: {
                        type: 'string'
                    }
                },
                requireReturn: {
                    type: 'boolean'
                },
                requireParamDescription: {
                    type: 'boolean'
                },
                requireReturnDescription: {
                    type: 'boolean'
                },
                matchDescription: {
                    type: 'string'
                },
                requireParamType: {
                    type: 'boolean'
                },
                requireReturnType: {
                    type: 'boolean'
                }
            },
            additionalProperties: false
        },
        optionExamples: [
            Lint.Utils.dedent(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject(["\n        \"", "\": [true]\n        "], ["\n        \"", "\": [true]\n        "])), RULE_NAME),
            Lint.Utils.dedent(templateObject_4 || (templateObject_4 = tslib_1.__makeTemplateObject(["\n        \"", "\": [true, {\n          \"prefer\": {\n            \"return\": \"returns\"\n          },\n          \"requireReturn\": false,\n          \"requireParamDescription\": true,\n          \"requireReturnDescription\": true,\n          \"matchDescription\": \"^[A-Z][A-Za-z0-9\\\\s]*[.]$\"\n        }]\n        "], ["\n        \"", "\": [true, {\n          \"prefer\": {\n            \"return\": \"returns\"\n          },\n          \"requireReturn\": false,\n          \"requireParamDescription\": true,\n          \"requireReturnDescription\": true,\n          \"matchDescription\": \"^[A-Z][A-Za-z0-9\\\\\\\\s]*[.]$\"\n        }]\n        "])), RULE_NAME)
        ],
        typescriptOnly: false,
        type: 'maintainability'
    };
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var ValidJsdocWalker = (function (_super) {
    tslib_1.__extends(ValidJsdocWalker, _super);
    function ValidJsdocWalker() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.fns = [];
        return _this;
    }
    ValidJsdocWalker.prototype.visitSourceFile = function (node) {
        _super.prototype.visitSourceFile.call(this, node);
    };
    ValidJsdocWalker.prototype.visitNode = function (node) {
        if (node.kind === ts.SyntaxKind.ClassExpression) {
            this.visitClassExpression(node);
        }
        else {
            _super.prototype.visitNode.call(this, node);
        }
    };
    ValidJsdocWalker.prototype.visitArrowFunction = function (node) {
        this.startFunction(node);
        _super.prototype.visitArrowFunction.call(this, node);
        this.checkJSDoc(node);
    };
    ValidJsdocWalker.prototype.visitFunctionExpression = function (node) {
        this.startFunction(node);
        _super.prototype.visitFunctionExpression.call(this, node);
        this.checkJSDoc(node);
    };
    ValidJsdocWalker.prototype.visitFunctionDeclaration = function (node) {
        this.startFunction(node);
        _super.prototype.visitFunctionDeclaration.call(this, node);
        this.checkJSDoc(node);
    };
    ValidJsdocWalker.prototype.visitClassExpression = function (node) {
        this.startFunction(node);
        _super.prototype.visitClassExpression.call(this, node);
        this.checkJSDoc(node);
    };
    ValidJsdocWalker.prototype.visitClassDeclaration = function (node) {
        this.startFunction(node);
        _super.prototype.visitClassDeclaration.call(this, node);
        this.checkJSDoc(node);
    };
    ValidJsdocWalker.prototype.visitMethodDeclaration = function (node) {
        this.startFunction(node);
        _super.prototype.visitMethodDeclaration.call(this, node);
        this.checkJSDoc(node);
    };
    ValidJsdocWalker.prototype.visitConstructorDeclaration = function (node) {
        this.startFunction(node);
        _super.prototype.visitConstructorDeclaration.call(this, node);
        this.checkJSDoc(node);
    };
    ValidJsdocWalker.prototype.visitReturnStatement = function (node) {
        this.addReturn(node);
        _super.prototype.visitReturnStatement.call(this, node);
    };
    ValidJsdocWalker.prototype.startFunction = function (node) {
        var returnPresent = false;
        var isVoidOrNever = false;
        var returnType;
        if (node.kind === ts.SyntaxKind.ArrowFunction && node.body.kind !== ts.SyntaxKind.Block)
            returnPresent = true;
        if (this.isTypeClass(node))
            returnPresent = true;
        returnType = node.type;
        if (returnType !== undefined) {
            switch (returnType.kind) {
                case ts.SyntaxKind.VoidKeyword:
                case ts.SyntaxKind.NeverKeyword:
                    isVoidOrNever = true;
                    break;
            }
        }
        this.fns.push({ node: node, returnPresent: returnPresent, isVoidOrNever: isVoidOrNever });
    };
    ValidJsdocWalker.prototype.addReturn = function (node) {
        var parent = node;
        var nodes = this.fns.map(function (fn) { return fn.node; });
        while (parent && nodes.indexOf(parent) === -1)
            parent = parent.parent;
        if (parent && node.expression) {
            this.fns[nodes.indexOf(parent)].returnPresent = true;
        }
    };
    ValidJsdocWalker.prototype.isTypeClass = function (node) {
        return node.kind === ts.SyntaxKind.ClassExpression || node.kind === ts.SyntaxKind.ClassDeclaration;
    };
    ValidJsdocWalker.prototype.isValidReturnType = function (tag) {
        return tag.type && (tag.type.name === 'void' || tag.type.type === 'UndefinedLiteral');
    };
    ValidJsdocWalker.prototype.getJSDocComment = function (node) {
        var ALLOWED_PARENTS = [
            ts.SyntaxKind.BinaryExpression,
            ts.SyntaxKind.VariableDeclaration,
            ts.SyntaxKind.VariableDeclarationList,
            ts.SyntaxKind.VariableStatement
        ];
        if (!/^\/\*\*/.test(node.getFullText().trim())) {
            if (node.parent && ALLOWED_PARENTS.indexOf(node.parent.kind) !== -1) {
                return this.getJSDocComment(node.parent);
            }
            return {};
        }
        var comments = node.getFullText();
        var offset = comments.indexOf('/**');
        comments = comments.substring(offset);
        comments = comments.substring(0, comments.indexOf('*/') + 2);
        var start = node.pos + offset;
        var width = comments.length;
        if (!/^\/\*\*/.test(comments) || !/\*\/$/.test(comments)) {
            return {};
        }
        return { comments: comments, start: start, width: width };
    };
    ValidJsdocWalker.prototype.checkJSDoc = function (node) {
        var _this = this;
        var _a = this.getJSDocComment(node), comments = _a.comments, start = _a.start, width = _a.width;
        if (!comments || start === undefined || width === undefined)
            return;
        var jsdoc;
        try {
            jsdoc = doctrine.parse(comments, {
                strict: true,
                unwrap: true,
                sloppy: true
            });
        }
        catch (e) {
            if (/braces/i.test(e.message)) {
                this.addFailure(this.createFailure(start, width, Rule.FAILURE_STRING.missingBrace));
            }
            else {
                this.addFailure(this.createFailure(start, width, Rule.FAILURE_STRING.syntaxError));
            }
            return;
        }
        var fn = this.fns.filter(function (f) { return node === f.node; })[0];
        var params = {};
        var hasReturns = false;
        var hasConstructor = false;
        var isOverride = false;
        var isAbstract = false;
        for (var _i = 0, _b = jsdoc.tags; _i < _b.length; _i++) {
            var tag = _b[_i];
            switch (tag.title) {
                case 'param':
                case 'arg':
                case 'argument':
                    if (!tag.type && OPTIONS.requireParamType) {
                        this.addFailure(this.createFailure(start, width, Rule.FAILURE_STRING.missingParameterType(tag.name)));
                    }
                    if (!tag.description && OPTIONS.requireParamDescription) {
                        this.addFailure(this.createFailure(start, width, Rule.FAILURE_STRING.missingParameterDescription(tag.name)));
                    }
                    if (params[tag.name]) {
                        this.addFailure(this.createFailure(start, width, Rule.FAILURE_STRING.duplicateParameter(tag.name)));
                    }
                    else if (tag.name.indexOf('.') === -1) {
                        params[tag.name] = true;
                    }
                    break;
                case 'return':
                case 'returns':
                    hasReturns = true;
                    isAbstract = Lint.hasModifier(fn.node.modifiers, ts.SyntaxKind.AbstractKeyword);
                    if (!isAbstract && !OPTIONS.requireReturn && !fn.returnPresent && tag.type && tag.type.name !== 'void' && tag.type.name !== 'undefined') {
                        this.addFailure(this.createFailure(start, width, Rule.FAILURE_STRING.unexpectedTag(tag.title)));
                    }
                    else {
                        if (!tag.type && OPTIONS.requireReturnType) {
                            this.addFailure(this.createFailure(start, width, Rule.FAILURE_STRING.missingReturnType));
                        }
                        if (!this.isValidReturnType(tag) && !tag.description && OPTIONS.requireReturnDescription) {
                            this.addFailure(this.createFailure(start, width, Rule.FAILURE_STRING.missingReturnDescription));
                        }
                    }
                    break;
                case 'constructor':
                case 'class':
                    hasConstructor = true;
                    break;
                case 'override':
                case 'inheritdoc':
                case 'inheritDoc':
                    isOverride = true;
                    break;
            }
            var title = OPTIONS.prefer[tag.title];
            if (OPTIONS.prefer.hasOwnProperty(tag.title) && tag.title !== title) {
                this.addFailure(this.createFailure(start, width, Rule.FAILURE_STRING.prefer(title)));
            }
        }
        if (!isOverride && !hasReturns && !hasConstructor && node.parent && node.parent.kind !== ts.SyntaxKind.GetKeyword && !this.isTypeClass(node)) {
            if (OPTIONS.requireReturn || (fn.returnPresent && !fn.isVoidOrNever)) {
                this.addFailure(this.createFailure(start, width, Rule.FAILURE_STRING.missingReturn(OPTIONS.prefer['returns'])));
            }
        }
        var jsdocParams = Object.keys(params);
        var parameters = node.parameters;
        if (parameters) {
            parameters.forEach(function (param, i) {
                if (param.name.kind === ts.SyntaxKind.Identifier) {
                    var name = param.name.text;
                    if (jsdocParams[i] && name !== jsdocParams[i]) {
                        _this.addFailure(_this.createFailure(start, width, Rule.FAILURE_STRING.wrongParam(name, jsdocParams[i])));
                    }
                    else if (!params[name] && !isOverride) {
                        _this.addFailure(_this.createFailure(start, width, Rule.FAILURE_STRING.missingParam(name)));
                    }
                }
            });
        }
        if (OPTIONS.matchDescription) {
            try {
                var regex = new RegExp(OPTIONS.matchDescription);
                if (!regex.test(jsdoc.description)) {
                    this.addFailure(this.createFailure(start, width, Rule.FAILURE_STRING.wrongDescription));
                }
            }
            catch (e) {
                this.addFailure(this.createFailure(start, width, e.message));
            }
        }
    };
    return ValidJsdocWalker;
}(Lint.RuleWalker));
var templateObject_1, templateObject_2, templateObject_3, templateObject_4;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
